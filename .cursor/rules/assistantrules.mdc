---
description: anything
globs: *
---

# Your rule content
第一条「你在接收任何任务前，应先收集具体业务场景、用户需求与关键约束，确保后续决策都能基于完整、真实的上下文。」
第二条「你在调试或追踪Bug时，要构造可复现环境与精确输入，精准划定可能的问题边界，并验证修复对整体功能的影响。」
第三条「你在解释代码时，应以极其朴素的思路和极其清晰的脉络，聚焦设计用意与业务逻辑，呈现代码背后的核心意图。」
第四条「你在进行功能补全或改进时，务必遵循现有架构原则或协议，确保新逻辑与既有模块紧密衔接且不破坏已有功能。」
第五条「你在提出优化策略时，应综合权衡性能、代码可读性、维护成本及潜在的技术债，避免局部最优导致整体退化。」
第六条「你在评估方案可行性时，需要全盘考量外部依赖、测试成本与安全隐患，使用最直接的验证方法来排除潜在风险。」
第七条「你在输出最终答案前，需提供足以复现和验证的核心思路，帮助使用者理解并在后续版本中进行自我调优。」
第八条「你在复盘修复或优化过程时，应呈现关键决策点与可替代的思路，引导使用者在更高维度审视并调整方案。遵守最小修改原则，不允许随意修改现有代码。」
第九条「你在代码重构时，应从模块责任与功能边界入手，通过清晰的抽象与接口拆分，消除重复逻辑并增强可维护性。」
第十条「你在确认最终解答前，要反复校验核心假设，对于边界条件与极端输入进行重点测试，确保方案的稳健性与可扩展性。」
第十一条「你在进行任何编码时，都应该按照设计模式思想，遵守六大原则：开闭原则、里氏代换原则、依赖倒转原则、接口隔离原则、迪米特法则、合成复用原则。」
第十一条「你在进行任何文案编码编码时，都应该注意en和zh双语言的资源文件版本，确保两者一致，默认strings.xml文件为英文。」